-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
  [Left, {[s("&&"), fun(l, op, r) {Binop(op, l, r)}]}],
  [Left, {[s("!!"), fun(l, op, r) {Binop(op, l, r)}]}],
  [Nona, {[s(">"), fun(l, op, r) {Binop(op, l, r)}],
    [s(">="), fun(l, op, r) {Binop(op, l, r)}],
    [s("<"), fun(l, op, r) {Binop(op, l, r)}],
    [s("<="), fun(l, op, r) {Binop(op, l, r)}],
    [s("=="), fun(l, op, r) {Binop(op, l, r)}],
    [s("!="), fun(l, op, r) {Binop(op, l, r)}]}],
  [Left, {[s("+"), fun(l, op, r) {Binop(op, l, r)}],
    [s("-"), fun(l, op, r) {Binop(op, l, r)}]}],
  [Left, {[s("*"), fun(l, op, r) {Binop(op, l, r)}],
    [s("/"), fun(l, op, r) {Binop(op, l, r)}],
    [s("%"), fun(l, op, r) {Binop(op, l, r)}]}]
}, primary);

var if_block = memo $ eta syntax (  
  kElse s2=stmt	{s2} | 
  kElif e=exp kThen s1=stmt s2=if_block {If (e, s1, s2)}
);

var stmt = memo $ eta syntax (
  kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
  kWrite e=inbr[s("("), exp, s(")")] {Write(e)} |
  kSkip {Skip} |
  x=lident s[":="] e=exp {Assn(x, e)} |
  kIf e1=exp kThen s1=stmt el=if_block kFi {If(e1, s1, el)} |
  kIf e1=exp kThen s1=stmt kFi {If(e1, s1, Skip)} |
  kWhile e=exp kDo s=stmt kOd {While(e, s)} |
  kDo s=stmt kWhile e=exp kOd {DoWhile(s, e)} |
  kFor init=stmt s[","] e=exp s[","] pos=stmt kDo body=stmt kOd {Seq(init, While(e, Seq(body, pos)))} |
  head=(kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
        kWrite e=inbr[s("("), exp, s(")")] {Write(e)} |
        kSkip {Skip} |
        x=lident s[":="] e=exp {Assn(x, e)} |
        kIf e1=exp kThen s1=stmt el=if_block kFi {If(e1, s1, el)} |
        kIf e1=exp kThen s1=stmt kFi {If(e1, s1, Skip)} |
        kWhile e=exp kDo s=stmt kOd {While(e, s)} |
        kDo s=stmt kWhile e=exp kOd {DoWhile(s, e)} |
        kFor init=stmt s[","] e=exp s[","] pos=stmt kDo body=stmt kOd {Seq(init, While(e, Seq(body, pos)))}) 
        s[";"] tail=stmt {Seq(head, tail)}
);

-- Public top-level parser
public parse = stmt;
