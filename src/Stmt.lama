-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case c of [state, w] ->
    case stmt of
      Assn (varName, expr) -> [state <- [varName, evalExpr (state, expr)], w]
      | Seq (stmt1, stmt2) -> eval (eval (c, stmt1), stmt2)
      | Skip -> c
      | Read (varName) -> 
        case readWorld (w) of 
          [value, w1] -> [state <- [varName, value], w1]
        esac
      | Write (expr) -> [state, writeWorld (evalExpr (state, expr), w)]
      | If (cond, stmt1, stmt2) ->
        if evalExpr (state, cond) then
          eval (c, stmt1)
        else
          eval (c, stmt2)
        fi
      | While (cond, body) ->
        if evalExpr (state, cond) then
          eval (eval (c, body), While (cond, body))
        else
          c
        fi
      | DoWhile (body, cond) ->
        case eval(c, body) of
          newC ->
            if evalExpr(newC.fst, cond) then
              eval(newC, While(cond, body))
            else
              newC
            fi
        esac
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
