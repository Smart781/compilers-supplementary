-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration

fun eval(env, c, insns) {
  case c of [s, state, w] -> (
    case insns of
        {} -> c
      | ST(x):tail -> eval(env, [snd(s), state <- [x, fst(s)], w], tail)
      | READ:tail ->
          case readWorld(w) of [input, newWorld] ->
            eval(env, [input:s, state, newWorld], tail)
          esac
      | LD(x):tail -> eval(env, [state(x):s, state, w], tail)
      | WRITE:tail -> eval(env, [snd(s), state, writeWorld(fst(s), w)], tail)
      | BINOP(op):tail ->
          case s of
              r:l:others -> eval(env, [evalOp(op, l, r):others, state, w], tail)
          esac
      | CONST(n):tail -> eval(env, [n:s, state, w], tail)
      | LABEL(s):tail -> eval(env, c, tail)
      | JMP(l):tail -> eval(env, c, fromLabel(env, l))
      | CJMP(cnd, l):tail ->
          case fst(s) of
              0 ->
                if cnd == "e" then
                  eval(env, [snd(s), state, w], fromLabel(env, l))
                else
                  eval(env, [snd(s), state, w], tail)
                fi
              | _ ->
                if cnd != "e" then
                  eval(env, [snd(s), state, w], fromLabel(env, l))
                else
                  eval(env, [snd(s), state, w], tail)
                fi
          esac
    esac      
  )
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
    case expr of
    Var (x) -> emptyBuffer () <+ LD (x)
  | Const (n) -> emptyBuffer () <+ CONST (n)
  | Binop (op, l, r) -> compileExpr(l) <+> compileExpr(r) <+ BINOP(op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  -- Generates a buffer with an optional label
  --    lab     --- the name of the label
  --    labUsed --- a flag if the label is needed
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  -- Generates SM code for a given statement
  --    lab  --- a label to go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip           -> [false, env, emptyBuffer ()]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> [false, env, compileExpr (e) <+ WRITE]
    | Assn  (x, e)   -> [false, env, compileExpr (e) <+ ST (x)]
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
              case compile (s2Lab, env, s1) of
                [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
              esac
        esac
    | If (e, s1, s2) ->
        case env.genLabel of
          [f_Lab, env] ->
              case compile(lab, env, s1) of
                [true, env, s1Code] ->
                  case compile(lab, env, s2) of
                    [true, env, s2Code] -> [true, env, compileExpr(e) <+ CJMP("z", f_Lab) <+> s1Code <+ JMP(lab) <+ LABEL(f_Lab) <+> s2Code] 
                  esac
              esac
        esac
    | While (e, s) ->
        case env.genLabel of 
          [en_lab, env] ->
            case env.genLabel of
              [av_lab, env] ->
                case compile (av_lab, env, s) of
                 [vr, env, code] ->
                   [false, env, singletonBuffer(JMP (av_lab)) <+> label (en_lab, true) <+> code <+> label (av_lab, true) <+> compileExpr (e) <+ CJMP ("nz", en_lab)]
                esac
            esac
        esac 
    | DoWhile(s, e)  ->
        case env.genLabel of
          [en_Lab, env] -> 
            case compile(en_Lab, env, s) of
              [vr, env, sCode] -> [false, env, emptyBuffer () <+ LABEL (en_Lab) <+> sCode <+> compileExpr (e) <+ CJMP ("nz", en_Lab)]
            esac
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }  

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+ label (endLab, endLabUsed)
       esac
  esac
}
