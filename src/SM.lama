-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case c of [s, state, w] -> (
    case insns of
      {} -> c
      | instr:rest ->
        case instr of
          READ ->
            case readWorld(w) of [value, w] ->
              eval ([value:s, state, w], rest)
            esac
        | WRITE ->
            case s of value:sv ->
              eval ([sv, state, writeWorld (value, w)], rest)
            esac
        | CONST (n) ->
            eval ([n:s, state, w], rest)
        | LD (varName) ->
            eval ([state(varName):s, state, w], rest)
        | ST (varName) ->
            case s of value:sv ->
              eval ([sv, state <- [varName, value], w], rest)
            esac
        | BINOP (op) ->
            case s of y:x:sb ->
              eval ([(evalOp(op, x, y)):sb, state, w], rest)
            esac
        esac
      esac
    )
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (name)       -> {LD (name)}
  | Const (value)    -> {CONST (value)}
  | Binop (op, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (varName, expr) -> compileExpr (expr) +++ {ST (varName)}
  | Seq (stmt1, stmt2)   -> compileSM (stmt1) +++ compileSM (stmt2)
  | Skip                 -> {}
  | Read (varName)       -> {READ, ST (varName)}
  | Write (expr)         -> compileExpr (expr) +++ {WRITE}
  esac
}
