-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval(c@[s, w], expr) {
  case expr of
    Var(name) -> [c, s(name)]
    | Const(v) -> [c, v]
    | Ref(refExp) -> [c, refExp]
    | Binop(op, left, right) ->
      case evalList(c, {left, right}) of
        [updatedC, {l, r}] ->
          [updatedC, calculate(op, l, r)]
      esac
    | Skip -> [c, {}]
    | Assn(target, valueExpr) ->
      case evalList(c, {target, valueExpr}) of
        [[state, world], {var, val}] ->
          [[state <- [var, val], world], val]
      esac
    | Ignore(stmt) ->
      case eval(c, stmt) of
        [updatedC, _] -> [updatedC, {}]
      esac
    | Read(varName) ->
      case performRead(w) of
        [inputVal, newW] ->
          [[s <- [varName, inputVal], newW], {}]
      esac
    | Write(writeExpr) ->
      case eval(c, writeExpr) of
        [[state, world], outputVal] ->
          [[state, appendWrite(outputVal, world)], {}]
      esac
    | Seq(stmt1, stmt2) ->
      eval(eval(c, stmt1).fst, stmt2)
    | If(condExpr, thenBranch, elseBranch) ->
      case eval(c, condExpr) of
        [conf, condResult] ->
          if condResult
            then eval(conf, thenBranch)
            else eval(conf, elseBranch)
          fi
      esac
    | While(condition, loopBody) ->
      case eval(c, condition) of
        [conf, condResult] ->
          if condResult
            then eval(eval(conf, loopBody).fst, expr)
            else [conf, {}]
          fi
      esac
    | DoWhile(loopBody, condition) ->
      eval(c, Seq(loopBody, While(condition, loopBody)))
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
