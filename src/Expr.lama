-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Var (name)       -> st name
  | Const (value)    -> value
  | Binop (op, e1, e2) ->
      let val1 = evalExpr (st, e1);
          val2 = evalExpr (st, e2) in
      case op of
        "+" -> val1 + val2
      | "-" -> val1 - val2
      | "*" -> val1 * val2
      | "/" -> val1 / val2
      | "%" -> val1 % val2
      | "<" -> val1 < val2
      | "<=" -> val1 <= val2
      | ">" -> val1 > val2
      | ">=" -> val1 >= val2
      | "==" -> val1 == val2
      | "!=" -> val1 != val2
      | "&&" -> val1 && val2
      | "!!" -> val1 !! val2
      esac
  esac
}
