-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Read (x) ->
      case readWorld (w) of
        [tmp, w] -> [[s <- [x, tmp], w], {}]
      esac
    | Write (exp) ->
      case eval (c, exp) of
        [[s, w], value] -> [[s, writeWorld (value, w)], {}]
      esac
    | Skip -> [c, {}]
    | Const (n) -> [c, n]
    | Var (x) -> [c, s (x)]
    | Ref (refExp) -> [c, refExp]
    | Binop (op, leftExp, rightExp) ->
      case evalList (c, {leftExp, rightExp}) of
        [c, {leftExp, rightExp}] -> [c, evalOp (op, leftExp, rightExp)]
      esac
    | Ignore (ignoredExp) ->
      case eval (c, ignoredExp) of
        [c, _] -> [c, {}]
      esac
    | Assn (variable, valueExp) ->
      case evalList (c, {variable, valueExp}) of
        [[s, w], {variable, valueExp}] -> [[s <- [variable, valueExp], w], valueExp]
      esac
    | If (cond, tb, elb) ->
      case eval (c, cond) of [c, res] ->
        if res
            then eval (c, tb)
            else eval (c, elb)
        fi
      esac
    | DoWhile (cond, dwb) -> eval (c, Seq (cond, While (dwb, cond)))
    | While (cond, wb) ->
      case eval (c, cond) of [c, res] ->
        if res
            then eval (c, Seq (wb, While (cond, wb)))
            else [c, {}]
        fi
      esac
    | Seq (firstExp, secondExp) ->
      case evalList (c, {firstExp, secondExp}) of
        [c, {firstExp, secondExp}] -> [c, secondExp]
      esac
    esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
